using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TicketMasterResponse;
//
//    var topLevel = TopLevel.FromJson(jsonString);

namespace TicketMasterResponse
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TopLevel
    {
        [JsonProperty("_embedded")]
        public TopLevelEmbedded Embedded { get; set; }

        [JsonProperty("_links")]
        public TopLevelLinks Links { get; set; }

        [JsonProperty("page")]
        public Page Page { get; set; }
    }

    public partial class TopLevelEmbedded
    {
        [JsonProperty("events")]
        public Event[] Events { get; set; }
    }

    public partial class Event
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public EventType Type { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("test")]
        public bool Test { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("locale")]
        public Locale Locale { get; set; }

        [JsonProperty("images")]
        public Image[] Images { get; set; }

        [JsonProperty("sales")]
        public Sales Sales { get; set; }

        [JsonProperty("dates")]
        public Dates Dates { get; set; }

        [JsonProperty("classifications")]
        public Classification[] Classifications { get; set; }

        [JsonProperty("info", NullValueHandling = NullValueHandling.Ignore)]
        public string Info { get; set; }

        [JsonProperty("priceRanges")]
        public PriceRange[] PriceRanges { get; set; }

        [JsonProperty("ticketLimit", NullValueHandling = NullValueHandling.Ignore)]
        public Accessibility TicketLimit { get; set; }

        [JsonProperty("_links")]
        public EventLinks Links { get; set; }

        [JsonProperty("_embedded")]
        public EventEmbedded Embedded { get; set; }

        [JsonProperty("promoter", NullValueHandling = NullValueHandling.Ignore)]
        public Promoter Promoter { get; set; }

        [JsonProperty("promoters", NullValueHandling = NullValueHandling.Ignore)]
        public Promoter[] Promoters { get; set; }

        [JsonProperty("accessibility", NullValueHandling = NullValueHandling.Ignore)]
        public Accessibility Accessibility { get; set; }

        [JsonProperty("pleaseNote", NullValueHandling = NullValueHandling.Ignore)]
        public string PleaseNote { get; set; }

        [JsonProperty("products", NullValueHandling = NullValueHandling.Ignore)]
        public Product[] Products { get; set; }

        [JsonProperty("seatmap", NullValueHandling = NullValueHandling.Ignore)]
        public Seatmap Seatmap { get; set; }
    }

    public partial class Accessibility
    {
        [JsonProperty("info")]
        public string Info { get; set; }
    }

    public partial class Classification
    {
        [JsonProperty("primary")]
        public bool Primary { get; set; }

        [JsonProperty("segment")]
        public Genre Segment { get; set; }

        [JsonProperty("genre")]
        public Genre Genre { get; set; }

        [JsonProperty("subGenre")]
        public Genre SubGenre { get; set; }

        [JsonProperty("type")]
        public Genre Type { get; set; }

        [JsonProperty("subType")]
        public Genre SubType { get; set; }

        [JsonProperty("family")]
        public bool Family { get; set; }
    }

    public partial class Genre
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Dates
    {
        [JsonProperty("start")]
        public Start Start { get; set; }

        [JsonProperty("timezone")]
        public Timezone Timezone { get; set; }

        [JsonProperty("status")]
        public Status Status { get; set; }

        [JsonProperty("spanMultipleDays")]
        public bool SpanMultipleDays { get; set; }
    }

    public partial class Start
    {
        [JsonProperty("localDate")]
        public DateTimeOffset LocalDate { get; set; }

        [JsonProperty("localTime")]
        public DateTimeOffset LocalTime { get; set; }

        [JsonProperty("dateTime")]
        public DateTimeOffset DateTime { get; set; }

        [JsonProperty("dateTBD")]
        public bool DateTbd { get; set; }

        [JsonProperty("dateTBA")]
        public bool DateTba { get; set; }

        [JsonProperty("timeTBA")]
        public bool TimeTba { get; set; }

        [JsonProperty("noSpecificTime")]
        public bool NoSpecificTime { get; set; }
    }

    public partial class Status
    {
        [JsonProperty("code")]
        public Code Code { get; set; }
    }

    public partial class EventEmbedded
    {
        [JsonProperty("venues")]
        public Venue[] Venues { get; set; }

        [JsonProperty("attractions")]
        public Attraction[] Attractions { get; set; }
    }

    public partial class Attraction
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public AttractionType Type { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("test")]
        public bool Test { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("locale")]
        public Locale Locale { get; set; }

        [JsonProperty("externalLinks", NullValueHandling = NullValueHandling.Ignore)]
        public ExternalLinks ExternalLinks { get; set; }

        [JsonProperty("images")]
        public Image[] Images { get; set; }

        [JsonProperty("classifications")]
        public Classification[] Classifications { get; set; }

        [JsonProperty("upcomingEvents")]
        public Dictionary<string, long> UpcomingEvents { get; set; }

        [JsonProperty("_links")]
        public AttractionLinks Links { get; set; }

        [JsonProperty("aliases", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Aliases { get; set; }
    }

    public partial class ExternalLinks
    {
        [JsonProperty("youtube", NullValueHandling = NullValueHandling.Ignore)]
        public Facebook[] Youtube { get; set; }

        [JsonProperty("twitter", NullValueHandling = NullValueHandling.Ignore)]
        public Facebook[] Twitter { get; set; }

        [JsonProperty("lastfm", NullValueHandling = NullValueHandling.Ignore)]
        public Facebook[] Lastfm { get; set; }

        [JsonProperty("facebook", NullValueHandling = NullValueHandling.Ignore)]
        public Facebook[] Facebook { get; set; }

        [JsonProperty("wiki", NullValueHandling = NullValueHandling.Ignore)]
        public Facebook[] Wiki { get; set; }

        [JsonProperty("musicbrainz")]
        public Musicbrainz[] Musicbrainz { get; set; }

        [JsonProperty("homepage", NullValueHandling = NullValueHandling.Ignore)]
        public Facebook[] Homepage { get; set; }

        [JsonProperty("itunes", NullValueHandling = NullValueHandling.Ignore)]
        public Facebook[] Itunes { get; set; }

        [JsonProperty("instagram", NullValueHandling = NullValueHandling.Ignore)]
        public Facebook[] Instagram { get; set; }
    }

    public partial class Facebook
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class Musicbrainz
    {
        [JsonProperty("id")]
        public Guid Id { get; set; }
    }

    public partial class Image
    {
        [JsonProperty("ratio")]
        public Ratio Ratio { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("fallback")]
        public bool Fallback { get; set; }

        [JsonProperty("attribution", NullValueHandling = NullValueHandling.Ignore)]
        public string Attribution { get; set; }
    }

    public partial class AttractionLinks
    {
        [JsonProperty("self")]
        public First Self { get; set; }
    }

    public partial class First
    {
        [JsonProperty("href")]
        public string Href { get; set; }
    }

    public partial class Venue
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public VenueType Type { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("test")]
        public bool Test { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("locale")]
        public Locale Locale { get; set; }

        [JsonProperty("postalCode")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PostalCode { get; set; }

        [JsonProperty("timezone")]
        public Timezone Timezone { get; set; }

        [JsonProperty("city")]
        public City City { get; set; }

        [JsonProperty("state")]
        public State State { get; set; }

        [JsonProperty("country")]
        public Country Country { get; set; }

        [JsonProperty("address")]
        public Address Address { get; set; }

        [JsonProperty("location")]
        public Location Location { get; set; }

        [JsonProperty("markets")]
        public Genre[] Markets { get; set; }

        [JsonProperty("dmas")]
        public Dma[] Dmas { get; set; }

        [JsonProperty("upcomingEvents")]
        public UpcomingEvents UpcomingEvents { get; set; }

        [JsonProperty("_links")]
        public AttractionLinks Links { get; set; }

        [JsonProperty("boxOfficeInfo", NullValueHandling = NullValueHandling.Ignore)]
        public BoxOfficeInfo BoxOfficeInfo { get; set; }

        [JsonProperty("parkingDetail", NullValueHandling = NullValueHandling.Ignore)]
        public string ParkingDetail { get; set; }

        [JsonProperty("accessibleSeatingDetail", NullValueHandling = NullValueHandling.Ignore)]
        public string AccessibleSeatingDetail { get; set; }

        [JsonProperty("generalInfo", NullValueHandling = NullValueHandling.Ignore)]
        public GeneralInfo GeneralInfo { get; set; }

        [JsonProperty("images", NullValueHandling = NullValueHandling.Ignore)]
        public Image[] Images { get; set; }

        [JsonProperty("social", NullValueHandling = NullValueHandling.Ignore)]
        public Social Social { get; set; }

        [JsonProperty("aliases", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Aliases { get; set; }
    }

    public partial class Address
    {
        [JsonProperty("line1")]
        public string Line1 { get; set; }
    }

    public partial class BoxOfficeInfo
    {
        [JsonProperty("phoneNumberDetail")]
        public string PhoneNumberDetail { get; set; }

        [JsonProperty("openHoursDetail")]
        public string OpenHoursDetail { get; set; }

        [JsonProperty("acceptedPaymentDetail", NullValueHandling = NullValueHandling.Ignore)]
        public string AcceptedPaymentDetail { get; set; }

        [JsonProperty("willCallDetail", NullValueHandling = NullValueHandling.Ignore)]
        public string WillCallDetail { get; set; }
    }

    public partial class City
    {
        [JsonProperty("name")]
        public CityName Name { get; set; }
    }

    public partial class Country
    {
        [JsonProperty("name")]
        public CountryName Name { get; set; }

        [JsonProperty("countryCode")]
        public CountryCode CountryCode { get; set; }
    }

    public partial class Dma
    {
        [JsonProperty("id")]
        public long Id { get; set; }
    }

    public partial class GeneralInfo
    {
        [JsonProperty("generalRule")]
        public string GeneralRule { get; set; }

        [JsonProperty("childRule")]
        public string ChildRule { get; set; }
    }

    public partial class Location
    {
        [JsonProperty("longitude")]
        public string Longitude { get; set; }

        [JsonProperty("latitude")]
        public string Latitude { get; set; }
    }

    public partial class Social
    {
        [JsonProperty("twitter")]
        public Twitter Twitter { get; set; }
    }

    public partial class Twitter
    {
        [JsonProperty("handle")]
        public string Handle { get; set; }
    }

    public partial class State
    {
        [JsonProperty("name")]
        public StateName Name { get; set; }

        [JsonProperty("stateCode")]
        public StateCode StateCode { get; set; }
    }

    public partial class UpcomingEvents
    {
        [JsonProperty("_total")]
        public long Total { get; set; }

        [JsonProperty("ticketmaster")]
        public long Ticketmaster { get; set; }

        [JsonProperty("tmr", NullValueHandling = NullValueHandling.Ignore)]
        public long? Tmr { get; set; }
    }

    public partial class EventLinks
    {
        [JsonProperty("self")]
        public First Self { get; set; }

        [JsonProperty("attractions")]
        public First[] Attractions { get; set; }

        [JsonProperty("venues")]
        public First[] Venues { get; set; }
    }

    public partial class PriceRange
    {
        [JsonProperty("type")]
        public PriceRangeType Type { get; set; }

        [JsonProperty("currency")]
        public Currency Currency { get; set; }

        [JsonProperty("min")]
        public double Min { get; set; }

        [JsonProperty("max")]
        public double Max { get; set; }
    }

    public partial class Product
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Promoter
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("name")]
        public PromoterName Name { get; set; }

        [JsonProperty("description")]
        public Description Description { get; set; }
    }

    public partial class Sales
    {
        [JsonProperty("public")]
        public Public Public { get; set; }

        [JsonProperty("presales", NullValueHandling = NullValueHandling.Ignore)]
        public Presale[] Presales { get; set; }
    }

    public partial class Presale
    {
        [JsonProperty("startDateTime")]
        public DateTimeOffset StartDateTime { get; set; }

        [JsonProperty("endDateTime")]
        public DateTimeOffset EndDateTime { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }
    }

    public partial class Public
    {
        [JsonProperty("startDateTime")]
        public DateTimeOffset StartDateTime { get; set; }

        [JsonProperty("startTBD")]
        public bool StartTbd { get; set; }

        [JsonProperty("endDateTime")]
        public DateTimeOffset EndDateTime { get; set; }
    }

    public partial class Seatmap
    {
        [JsonProperty("staticUrl")]
        public Uri StaticUrl { get; set; }
    }

    public partial class TopLevelLinks
    {
        [JsonProperty("first")]
        public First First { get; set; }

        [JsonProperty("self")]
        public First Self { get; set; }

        [JsonProperty("next")]
        public First Next { get; set; }

        [JsonProperty("last")]
        public First Last { get; set; }
    }

    public partial class Page
    {
        [JsonProperty("size")]
        public long Size { get; set; }

        [JsonProperty("totalElements")]
        public long TotalElements { get; set; }

        [JsonProperty("totalPages")]
        public long TotalPages { get; set; }

        [JsonProperty("number")]
        public long Number { get; set; }
    }

    public enum Code { Offsale, Onsale, Rescheduled };

    public enum Timezone { AmericaNewYork };

    public enum Ratio { The16_9, The3_1, The3_2, The4_3 };

    public enum Locale { EnUs };

    public enum AttractionType { Attraction };

    public enum CityName { Cincinnati, Covington, Dayton };

    public enum CountryCode { Us };

    public enum CountryName { UnitedStatesOfAmerica };

    public enum StateName { Kentucky, Ohio };

    public enum StateCode { Ky, Oh };

    public enum VenueType { Venue };

    public enum Currency { Usd };

    public enum PriceRangeType { Standard };

    public enum Description { LiveNationMusicNtlUsa, PromotedByVenueNtlUsa };

    public enum PromoterName { LiveNationMusic, PromotedByVenue };

    public enum EventType { Event };

    public partial class TopLevel
    {
        public static TopLevel FromJson(string json) => JsonConvert.DeserializeObject<TopLevel>(json, TicketMasterResponse.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TopLevel self) => JsonConvert.SerializeObject(self, TicketMasterResponse.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                RatioConverter.Singleton,
                LocaleConverter.Singleton,
                AttractionTypeConverter.Singleton,
                CityNameConverter.Singleton,
                CountryCodeConverter.Singleton,
                CountryNameConverter.Singleton,
                StateNameConverter.Singleton,
                StateCodeConverter.Singleton,
                TimezoneConverter.Singleton,
                VenueTypeConverter.Singleton,
                CodeConverter.Singleton,
                CurrencyConverter.Singleton,
                PriceRangeTypeConverter.Singleton,
                DescriptionConverter.Singleton,
                PromoterNameConverter.Singleton,
                EventTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class RatioConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Ratio) || t == typeof(Ratio?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "16_9":
                    return Ratio.The16_9;
                case "3_1":
                    return Ratio.The3_1;
                case "3_2":
                    return Ratio.The3_2;
                case "4_3":
                    return Ratio.The4_3;
            }
            throw new Exception("Cannot unmarshal type Ratio");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Ratio)untypedValue;
            switch (value)
            {
                case Ratio.The16_9:
                    serializer.Serialize(writer, "16_9");
                    return;
                case Ratio.The3_1:
                    serializer.Serialize(writer, "3_1");
                    return;
                case Ratio.The3_2:
                    serializer.Serialize(writer, "3_2");
                    return;
                case Ratio.The4_3:
                    serializer.Serialize(writer, "4_3");
                    return;
            }
            throw new Exception("Cannot marshal type Ratio");
        }

        public static readonly RatioConverter Singleton = new RatioConverter();
    }

    internal class LocaleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Locale) || t == typeof(Locale?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "en-us")
            {
                return Locale.EnUs;
            }
            throw new Exception("Cannot unmarshal type Locale");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Locale)untypedValue;
            if (value == Locale.EnUs)
            {
                serializer.Serialize(writer, "en-us");
                return;
            }
            throw new Exception("Cannot marshal type Locale");
        }

        public static readonly LocaleConverter Singleton = new LocaleConverter();
    }

    internal class AttractionTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AttractionType) || t == typeof(AttractionType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "attraction")
            {
                return AttractionType.Attraction;
            }
            throw new Exception("Cannot unmarshal type AttractionType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AttractionType)untypedValue;
            if (value == AttractionType.Attraction)
            {
                serializer.Serialize(writer, "attraction");
                return;
            }
            throw new Exception("Cannot marshal type AttractionType");
        }

        public static readonly AttractionTypeConverter Singleton = new AttractionTypeConverter();
    }

    internal class CityNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CityName) || t == typeof(CityName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Cincinnati":
                    return CityName.Cincinnati;
                case "Covington":
                    return CityName.Covington;
                case "Dayton":
                    return CityName.Dayton;
            }
            throw new Exception("Cannot unmarshal type CityName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CityName)untypedValue;
            switch (value)
            {
                case CityName.Cincinnati:
                    serializer.Serialize(writer, "Cincinnati");
                    return;
                case CityName.Covington:
                    serializer.Serialize(writer, "Covington");
                    return;
                case CityName.Dayton:
                    serializer.Serialize(writer, "Dayton");
                    return;
            }
            throw new Exception("Cannot marshal type CityName");
        }

        public static readonly CityNameConverter Singleton = new CityNameConverter();
    }

    internal class CountryCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CountryCode) || t == typeof(CountryCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "US")
            {
                return CountryCode.Us;
            }
            throw new Exception("Cannot unmarshal type CountryCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CountryCode)untypedValue;
            if (value == CountryCode.Us)
            {
                serializer.Serialize(writer, "US");
                return;
            }
            throw new Exception("Cannot marshal type CountryCode");
        }

        public static readonly CountryCodeConverter Singleton = new CountryCodeConverter();
    }

    internal class CountryNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CountryName) || t == typeof(CountryName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "United States Of America")
            {
                return CountryName.UnitedStatesOfAmerica;
            }
            throw new Exception("Cannot unmarshal type CountryName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CountryName)untypedValue;
            if (value == CountryName.UnitedStatesOfAmerica)
            {
                serializer.Serialize(writer, "United States Of America");
                return;
            }
            throw new Exception("Cannot marshal type CountryName");
        }

        public static readonly CountryNameConverter Singleton = new CountryNameConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class StateNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(StateName) || t == typeof(StateName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Kentucky":
                    return StateName.Kentucky;
                case "Ohio":
                    return StateName.Ohio;
            }
            throw new Exception("Cannot unmarshal type StateName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (StateName)untypedValue;
            switch (value)
            {
                case StateName.Kentucky:
                    serializer.Serialize(writer, "Kentucky");
                    return;
                case StateName.Ohio:
                    serializer.Serialize(writer, "Ohio");
                    return;
            }
            throw new Exception("Cannot marshal type StateName");
        }

        public static readonly StateNameConverter Singleton = new StateNameConverter();
    }

    internal class StateCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(StateCode) || t == typeof(StateCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "KY":
                    return StateCode.Ky;
                case "OH":
                    return StateCode.Oh;
            }
            throw new Exception("Cannot unmarshal type StateCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (StateCode)untypedValue;
            switch (value)
            {
                case StateCode.Ky:
                    serializer.Serialize(writer, "KY");
                    return;
                case StateCode.Oh:
                    serializer.Serialize(writer, "OH");
                    return;
            }
            throw new Exception("Cannot marshal type StateCode");
        }

        public static readonly StateCodeConverter Singleton = new StateCodeConverter();
    }

    internal class TimezoneConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Timezone) || t == typeof(Timezone?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "America/New_York")
            {
                return Timezone.AmericaNewYork;
            }
            throw new Exception("Cannot unmarshal type Timezone");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Timezone)untypedValue;
            if (value == Timezone.AmericaNewYork)
            {
                serializer.Serialize(writer, "America/New_York");
                return;
            }
            throw new Exception("Cannot marshal type Timezone");
        }

        public static readonly TimezoneConverter Singleton = new TimezoneConverter();
    }

    internal class VenueTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(VenueType) || t == typeof(VenueType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "venue")
            {
                return VenueType.Venue;
            }
            throw new Exception("Cannot unmarshal type VenueType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (VenueType)untypedValue;
            if (value == VenueType.Venue)
            {
                serializer.Serialize(writer, "venue");
                return;
            }
            throw new Exception("Cannot marshal type VenueType");
        }

        public static readonly VenueTypeConverter Singleton = new VenueTypeConverter();
    }

    internal class CodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Code) || t == typeof(Code?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "offsale":
                    return Code.Offsale;
                case "onsale":
                    return Code.Onsale;
                case "rescheduled":
                    return Code.Rescheduled;
            }
            throw new Exception("Cannot unmarshal type Code");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Code)untypedValue;
            switch (value)
            {
                case Code.Offsale:
                    serializer.Serialize(writer, "offsale");
                    return;
                case Code.Onsale:
                    serializer.Serialize(writer, "onsale");
                    return;
                case Code.Rescheduled:
                    serializer.Serialize(writer, "rescheduled");
                    return;
            }
            throw new Exception("Cannot marshal type Code");
        }

        public static readonly CodeConverter Singleton = new CodeConverter();
    }

    internal class CurrencyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Currency) || t == typeof(Currency?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "USD")
            {
                return Currency.Usd;
            }
            throw new Exception("Cannot unmarshal type Currency");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Currency)untypedValue;
            if (value == Currency.Usd)
            {
                serializer.Serialize(writer, "USD");
                return;
            }
            throw new Exception("Cannot marshal type Currency");
        }

        public static readonly CurrencyConverter Singleton = new CurrencyConverter();
    }

    internal class PriceRangeTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PriceRangeType) || t == typeof(PriceRangeType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "standard")
            {
                return PriceRangeType.Standard;
            }
            throw new Exception("Cannot unmarshal type PriceRangeType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PriceRangeType)untypedValue;
            if (value == PriceRangeType.Standard)
            {
                serializer.Serialize(writer, "standard");
                return;
            }
            throw new Exception("Cannot marshal type PriceRangeType");
        }

        public static readonly PriceRangeTypeConverter Singleton = new PriceRangeTypeConverter();
    }

    internal class DescriptionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Description) || t == typeof(Description?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "LIVE NATION MUSIC / NTL / USA":
                    return Description.LiveNationMusicNtlUsa;
                case "PROMOTED BY VENUE / NTL / USA":
                    return Description.PromotedByVenueNtlUsa;
            }
            throw new Exception("Cannot unmarshal type Description");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Description)untypedValue;
            switch (value)
            {
                case Description.LiveNationMusicNtlUsa:
                    serializer.Serialize(writer, "LIVE NATION MUSIC / NTL / USA");
                    return;
                case Description.PromotedByVenueNtlUsa:
                    serializer.Serialize(writer, "PROMOTED BY VENUE / NTL / USA");
                    return;
            }
            throw new Exception("Cannot marshal type Description");
        }

        public static readonly DescriptionConverter Singleton = new DescriptionConverter();
    }

    internal class PromoterNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PromoterName) || t == typeof(PromoterName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "LIVE NATION MUSIC":
                    return PromoterName.LiveNationMusic;
                case "PROMOTED BY VENUE":
                    return PromoterName.PromotedByVenue;
            }
            throw new Exception("Cannot unmarshal type PromoterName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PromoterName)untypedValue;
            switch (value)
            {
                case PromoterName.LiveNationMusic:
                    serializer.Serialize(writer, "LIVE NATION MUSIC");
                    return;
                case PromoterName.PromotedByVenue:
                    serializer.Serialize(writer, "PROMOTED BY VENUE");
                    return;
            }
            throw new Exception("Cannot marshal type PromoterName");
        }

        public static readonly PromoterNameConverter Singleton = new PromoterNameConverter();
    }

    internal class EventTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(EventType) || t == typeof(EventType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "event")
            {
                return EventType.Event;
            }
            throw new Exception("Cannot unmarshal type EventType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (EventType)untypedValue;
            if (value == EventType.Event)
            {
                serializer.Serialize(writer, "event");
                return;
            }
            throw new Exception("Cannot marshal type EventType");
        }

        public static readonly EventTypeConverter Singleton = new EventTypeConverter();
    }
}

